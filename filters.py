import logging
import asyncio
from pyrogram import types, Client
from .. import (
    loader, utils, validators)
from ..types import Config, ConfigValue
import json

@loader.module(name="Filters", author="HotDrify")
class FiltersMod(loader.Module):
  """–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ FTG"""
  def __init__(self):
    self.config = Config(
        ConfigValue(
            'waitTime',
            0.0,
            0.0,
            validators.Integer(minimum=0.0, maximum=10.0)
        )
    )
    async def filter_cmd(self, message: types.Message, args: str):
        """–¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"""
        filters = self.db.get("Filters", "filters", {})
        data = json.loads(str(filters))
        if not message.reply_to_message:
            return await utils.answer(message, "üö´ –Ω–µ—Ç—É –ø–µ—Ä–ª–µ—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        if message.reply_to_message.text in filters:
            return await utils.answer(message, "üö´ —É–∂–µ –µ—Å—Ç—å.")
        if not args:
            return await utils.answer(message, "üö´ –Ω–µ—Ç—É –∞–≥—Ä—É–º–µ–Ω—Ç–æ–≤!")
        data[str(message.chat.id)] = {args: message.reply_to_message.text}
        upd = json.dumps(data)
        self.db.set("Filters", "filters", upd)
        await utils.answer(message, f"‚úÖ —Ñ–∏–ª—å—Ç—Ä <b>{args}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    async def stopall_cmd(self, message: types.Message, args: str):
        """–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
        filters = self.db.get("Filters", "filters", {})
        if message.chat.id not in filters:
            return await utils.answer(message, "üö´ –Ω–µ—Ç—É –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö!")
        #if not args:
        #    return await utils.answer(message, "üö´ –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!")
        del data[message.chat.id]
        upd = json.dumps(data)
        self.db.set("Filters", "filters", upd)
        await utils.answer(message, f"‚úÖ —Ñ–∏–ª—å—Ç—Ä—ã —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω—ã")
    @loader.on(lambda _, m: m)
    async def watcher(self, app: Client, message: types.Message):
        filters = self.db.get("Filters", "filters", {})
        if str(message.chat.id) in filters:
            if message in filters:
                await message.reply(filters[message])
    
